
[{"content":"","externalUrl":null,"permalink":"/arch-install-guide/","section":"Arch Install Guide","summary":"","title":"Arch Install Guide","type":"arch-install-guide"},{"content":"C D F G I K L M P R S U compilation Compilation is the act of turning source code into machine code. distro A \u0026ldquo;distro\u0026rdquo; (or Linux distribution) is a bundle of software including a fully-configured copy of the Linux kernel, and other software which allow applications to run. For example, Arch Linux is a distro that comes bundled with the GNU software collection, systemd, and pacman. filesystem A filesystem is a set of rules as to how files should be organised and accessed on a partition - this usually deletes everything on that partition (if there\u0026rsquo;s anything on there to begin with). Think of the partition as a piece of paper. Formatting is like drawing the guide lines, margin and setting the page layout so you can write inside of it properly, of course, for the piece of paper to be useful, everything on it needs to be rubbed out before you can do so. format To format a partition means to prepare it for storing files by creating a filesystem on it. gnu GNU, is a collection of software that allows you to fully interact with your computer. Linux was created after GNU as it has no kernel, which is essential for a computer to run. init An init process is the first process your computer loads when powering on. It is the parent of all processes - it sets them up and manages them. It does things like running background processes, configures hardware et cetera, and makes sure that the computer has come to the state where it\u0026rsquo;s ready for you to use. It stays running the entire time that your computer is on, managing processes as I have stated before and handling errors if they crash. Arch Linux uses systemd, which is an entire suite of software, not just an init system, doing things such as logging and networking. It\u0026rsquo;s easy to manage as everything is in one place, and provides fast boot-up times. iso file An iso file is, generally speaking, an \u0026ldquo;image\u0026rdquo; (or snapshot) of what would be written to something like a CD or drive. However, within the context of this guide, an ISO file is a single file that contains all the data needed to install an operating system. Arch Linux is installed using a live ISO, meaning that the operating system that boots from it is a complete and fully-functional operating system. However, this is only used as an intermediate stage to get Arch Linux installed on to your drive. kernel A kernel is the middleman between programs and hardware. An example of this is the NT kernel, which is what Windows uses. linux Linux is a Unix-like kernel released in 1991 by Linus Torvalds. machine code Machine code (also known as a \u0026lsquo;binary executable\u0026rsquo;, or just \u0026lsquo;binary\u0026rsquo;) is what computers can actually understand and run (or \u0026ldquo;execute\u0026rdquo;). mirror A mirror is essentially a duplicate copy of some data on a master server (a server that the data was originally uploaded on). Mirrors are kept for two reasons, to have a copy in case something goes wrong on the master server (or, \u0026ldquo;redundancy\u0026rdquo;) and speed. Mirrors are set up on Linux distros to make download speeds faster, because, put simply, the closer you are to a server, the less time it takes to upload and download data. This is why the mirrorlist exists, as really slow download speeds can time out, meaning that your computer will give up after some period of waiting. package manager A package manager is a collection of software that automates the process of installing, updating and deleting software on a computer in a consistent manner. Arch Linux uses pacman (not to be confused with the \u0026rsquo;80s arcade game) which is a rolling release package manager, meaning that software is not released as regular, big updates every once in a while, but rather, small and continuous updates delivered frequently. partition A partition is an explicitly defined section of your drive. Each partition on your computer can be managed separately, meaning all of the data on one partition is completely different from the data on another. This is useful for keeping data crucial for your system to run from other data like documents. root directory Not to be confused with the root user. The root directory is the furthest back in a file structure you can go. It is where all the branches created from files and folders on your computer originate from. It holds important folders such as /boot/ and /home/. root user Not to be confused with the root directory. The root user is the most powerful user on your computer capable of performing any task with zero restrictions. Regular users can\u0026rsquo;t and shouldn\u0026rsquo;t be able to run everything as root, because it\u0026rsquo;s too easy to, for example, delete something important that is essential for your OS to function. This is why it\u0026rsquo;s good practice to make a user separate from the root user, and add a password to it so you think more about what you type in to your shell. shell The shell is the text interface that allows you to interact with your computer that surrounds the kernel to hide its intricate details. signature A signature (or a \u0026lsquo;hash signature\u0026rsquo;, or just \u0026lsquo;hash\u0026rsquo;) is a random string of letters assigned to a file that serves as its unique digital fingerprint. A good hashing algorithm (such as SHA-256) produces a unique string of letters for each input it is given, if they are different. This means that it is impossible for a file to be tampered with without producing an extremely different hash. This is why it is important to check the signature of each file you download off the internet with the one given by the software\u0026rsquo;s publisher. source code Source code is what computer programmers write to make computers do things. It needs to be converted into machine code before it can be run (or \u0026ldquo;executed\u0026rdquo;). Programs can either be distributed as source code, meaning that the user has to compile it themselves, or they can be distributed as machine code where no compilation is needed. Both approaches have their upsides and downsides. Source code distributions means that the user has to compile the code, meaning that your program suddenly has a learning curve attached to it. Machine code distributions mean that your program now only works for one kind of machine and operating system (for example, if you compile your program on an x64 Linux machine, the machine code binary will only work other x64 Linux machines). swap Linux swap is either a file or partition on your drive. It is used as a section of your disk that can store data in RAM even when the computer is off (for hibernation, which is important for laptop users) or be used in case RAM runs out. Even if you are not on a laptop and have a sufficient amount of RAM, some programs rely solely on swap, so make create swap space regardless. This guide will not create a swapfile, but rather, a swap partition to keep the swap data separate from everything else. unix-like Unix is an operating system family that started off at AT\u0026amp;T. It became very influential within academic circles, leading to large-scale adoption by start-up companies, leading Unix to fragment into much smaller, similar but mostly mutually incompatible OSes. Among these are MacOS and the BSD operating systems (FreeBSD, OpenBSD, NetBSD .etc). An operating system is said to be Unix-like if it behaves like a Unix operating system. For this reason, Linux is generally considered to be Unix-like. The reason why Linux is Unix-like and not Unix is because it is commonly paired with GNU, which stands for \u0026ldquo;GNU\u0026rsquo;s Not Unix\u0026rdquo;. ","externalUrl":null,"permalink":"/arch-install-guide/glossary/","section":"Arch Install Guide","summary":"Terms you may come across when reading the documentation. This contains a list defining all of these terms.","title":"Glossary","type":"arch-install-guide"},{"content":"Arch Linux is a rolling release Linux distribution, meaning that software updates are released as small continuous updates rather than big updates delivered at regular intervals, like Windows.\nThis makes Arch Linux great for gaming, as new updates to GPU drivers and such are installable as soon as they are available.\nHowever, there is a bit of a learning curve when it comes to Arch, especially when it comes to installing it and any apps through pacman. However, don\u0026rsquo;t let this scare you, as this guide will cover those things in-depth.\nImportant terminology # Important terminology can be found on the glossary here. Make sure to have a good read of it so you have a good understanding of what I\u0026rsquo;m trying to across in the guide.\nWhat this guide will not cover (as of now) # All the points below are unplanned as of now - but may come sometime in the future!\nHow to install any unofficial ports of Arch Linux (e.g. Artix, Arch Linux ARM, Arch Linux 32 .etc). How to dual-boot any operating system with Linux How to configure desktop environments. How to configure shells How to configure greeters Requirements # You must have basic technical understanding (i.e. know what \u0026lsquo;hardware\u0026rsquo; and \u0026lsquo;software\u0026rsquo; mean) and you must have an AMD64 computer (or \u0026lsquo;x86_64\u0026rsquo;) which your computer likely is.\nSwitching to Arch from Windows (or want a dual-boot setup)? Hit the Windows Key and R on your keyboard at the same time, a dialog like the below should appear on the bottom left of your screen: In it, type cmd.exe, and hit enter. A window like the below should appear: In that, enter the below command:\necho %PROCESSOR_ARCHITECTURE% If it returns AMD64, you\u0026rsquo;re all good to go.\nSwitching to Arch from MacOS or another Linux distro? On MacOS, open the \u0026ldquo;Terminal\u0026rdquo; application from Finder.\nOn any Linux distribution, open your terminal application. This could be kitty, alacritty, konsole, yakuake .etc.\nIn the shell, enter the below command:\nuname -m If it returns x86_64, you\u0026rsquo;re all good to go.\nGuide notation # \u0026lt;...\u0026gt; means that there\u0026rsquo;s something between the text shown in the guide, which have been omitted to narrow the guide\u0026rsquo;s focus, or because the program lists something specific to your computer .etc\nAnything else between angled brackets means that you should substitute it with what the text reads, for example, \u0026lt;your drive\u0026gt; means that you should substitute \u0026lt;your drive\u0026gt; for the drive that you want to install Arch Linux on to.\nAny text after hashtags, where the hashtag is not the first character in the command, explain the command you are running and may be omitted when you type it in.\nThis means that if you see the below in the guide:\nsfdisk --delete \u0026lt;your drive\u0026gt; # make a backup of your drive before running this command Assuming your drive is /dev/sda, you would type the below command into the shell:\nsfdisk --delete /dev/sda Prompts # # before a command means that you need the command as root in order to execute it. The safest (and simplest) was to do so is to replace the hashtag with sudo. If you are in the Arch Live ISO, you can simply omit the hashtag when typing in the command.\n$ before a command means that the command can just be run normally. Just omit the dollar sign when typing in the command.\nAny other prompt before a command means that you should not be typing in the command into your shell, but rather, you should be typing it into some other program, such as iwctl, which has the prompt: [iwd]#\nWarning\nMake sure you read everything thoroughly instead of blindly copying and pasting commands into the Arch Live ISO or the terminal. Any loss of data as a result of this recklessness is no fault to the author of this guide\n","externalUrl":null,"permalink":"/arch-install-guide/introduction/","section":"Arch Install Guide","summary":"Outlines what the guide will and will not go through, requirements for installing Arch and guide notation","title":"Introduction","type":"arch-install-guide"},{"content":" Reboot into firmware interface # Firstly, have a BitTorrent client installed on your computer. If you don\u0026rsquo;t, install one from here.\nThen, visit the official Arch Linux website to find the magnet link required to download the file. Once you find the magent link, click on it and the torrenting process should start shortly.\nOnce the torrenting process has completed, you should see a file named archlinux-2025.05.01-x86_64.iso in the downloads folder on your computer.\nTake this file and use some program such as Rufus (Windows only), BalenaEtcher or Ventoy to write the ISO image to an appropriate medium, such as a CD, SD card or USB thumbdrive.\nOnce you have written the ISO file to your computer, click on one of the collapsible sections below and follow the instructions given, depending on what browser you\u0026rsquo;re starting off from:\nSwitching from Windows to Arch? Hit the Windows Key and R on your keyboard at the same time, a dialog like the below should appear on the bottom left of your screen: In it, type cmd.exe, and hit enter. A window like the below should appear: In that, enter the below command:\n$ shutdown /r /fw /t 1 You should see some kind of screen with options to configure how your computer runs. What exactly you see depends on your hardware manufacturer, which you should search up, as having a photo for each firmware options screen would make this page unnecessarily long.\nFind some option with a name similar to boot options, and select the storage medium that contains the Arch Linux live environment.\nSwitching to Arch on a Mac? Turn off your computer and hold the Option key as you turn on your Mac.\nYou may see a screen like the below. If your computer boots normally, you held Option too late, so try again with better timing. Use the arrow keys on your keyboard to navigate to the option labelled EFI Boot and press Enter on your keyboard to select it.\nSwitching to Arch from another Linux distro? Open your terminal application, this could be kitty, alacritty, konsole, yakuake .etc.\nIn your shell, type the below command:\n# systemctl reboot --firmware-setup Once you have booted from your storage medium, select Arch Linux install medium (x86_64, UEFI), or Arch Linux install medium (x86_64, UEFI) with speech if you are visually impaired.\nYou should then see something resembling the following screen:\nChange font (on HiDPI monitors) # If you have a HiDPI monitor, it may be in your best interest to change the terminal font to a larger one since the text may be small and difficult to read.\nLoad a larger terminal font as shown below:\nsetfont ter-132b Load keymaps # A keymap is how your keyboard is laid out. It defines the keys you use and where they are placed on the keyboard. To find a list of all the keymaps available for your language/region, run the below command:\nlocalectl list-keymaps To search for a keymap, use the following command, replacing \u0026lt;search_term\u0026gt; with the code for your language, country, or layout:\nlocalectl list-keymaps | grep -i \u0026lt;search_term\u0026gt; Once you\u0026rsquo;ve found a keymap that matches your physical keyboard\u0026rsquo;s layout, run the below command.\nloadkeys \u0026lt;keymap\u0026gt; ","externalUrl":null,"permalink":"/arch-install-guide/booting_into_the_live_iso/","section":"Arch Install Guide","summary":"Informs you on how to boot into the Arch Live ISO and basic things like setting up keymaps and font sizes in the Live ISO","title":"Booting the Arch Live ISO","type":"arch-install-guide"},{"content":"Now that you have entered the Arch live ISO, you\u0026rsquo;ll need to connect to the internet.\nYou\u0026rsquo;ll need to connect to the internet in order to download essential programs, such as the kernel.\nThere are two main ways to connect to the internet, and one is a lot more common than the other.\nThe first method is a fixed broadband, which is where your modem is connected to the wider-area network using a cable.\nThe second method is a mobile broadband modem, where your modem is connected to the wider-area network using a cellular network (like the one your phone uses, 4G and 5G).\nIf you are unsure, you likely have a fixed broadband.\nIf you normally connect via an ethernet cable, you may skip this section after plugging it in.\nConnecting to a fixed broadband network Firstly, enter the below command:\n# iwctl This will change your shell prompt from:\nroot@archiso ~ # to:\n[iwd]# In this new prompt, the following command will show a list of your network devices (interface that provides some network functionality, e.g. connecting to the internet using Wi-Fi) and their adapters (the actual network hardware):\n[iwd]# device list Find your network device (and its adapter, if applicable) from the list given, and turn them on using the commands below:\n[iwd]# device \u0026lt;network device\u0026gt; set-property Powered on [iwd]# device \u0026lt;network adapter\u0026gt; set-property Powered on Once you have done that, scan for networks using the command below:\n[iwd]# station \u0026lt;network device\u0026gt; scan Take note that the above command will not output anything. To actually output a list of all the networks around your computer, run the following command:\n[iwd]# station \u0026lt;network device\u0026gt; get-networks Then, to connect to the network of your choice, use the below command:\n[iwd]# station \u0026lt;network device\u0026gt; connect \u0026lt;network SSID\u0026gt; If the network is hidden (i.e. it doesn\u0026rsquo;t show up in the list of networks, but you want to connect to it anyway), use the below command:\n[iwd]# station \u0026lt;network device\u0026gt; connect-hidden \u0026lt;network SSID\u0026gt; Enter your network password when prompted and hit enter.\nOnce finished, simply enter:\n[iwd]# exit Connecting to a mobile broadband modem Enable the modemmanager service, as shown below:\n# systemctl enable modemmanager.service --now modemmanager is the software that allows you to connect to your mobile broadband modem.\nTo get a list of all the mobile broadband modems around you, run the below command:\n# mmcli -L Look for /org/freedesktop/ModemManager1/Modem/[modem index] (where your modem index is the unique number representing your modem)\nConnect to your modem by running:\n# mmcli -m \u0026lt;modem index\u0026gt; --simple-connect=\u0026#34;apn=\u0026lt;your modem\u0026#39;s APN\u0026gt;\u0026#34; Your APN is your modem\u0026rsquo;s Access Point Name and will have been given to you by your ISP.\nIf your modem requires a username and password, you can specify them like so:\\\nmmcli -m \u0026lt;modem index\u0026gt; --simple-connect=\u0026#34;apn=\u0026lt;your modem\u0026#39;s APN\u0026gt;,user=\u0026lt;username\u0026gt;,password=\u0026lt;password\u0026gt;\u0026#34; Test that your internet connection actually works, as shown below:\nping -c 4 archlinux.org ","externalUrl":null,"permalink":"/arch-install-guide/connect_to_the_internet/","section":"Arch Install Guide","summary":"Informs you on how to connect to the internet in the Arch Live ISO","title":"Connect to the internet","type":"arch-install-guide"},{"content":"Now that the Arch live ISO has been connected to the internet, you\u0026rsquo;ll need to divide your disk up into partitions.\nThis guide will show you how to create four different partitions:\nA boot partition, which holds the files that load the kernel and other necessary things for your computer to enter a state where it can be used. A swap partition, which holds swap space A root partition, which holds your root directory A home partition, which holds your user account and anything that might be stored on to it, like images and documents. Warning\nThe guide assumes you want to delete everything on your drive.\nMake sure you have backed up everything important on it before you continue with this guide.\nPartitioning the drive # Firstly, enter the gdisk shell (which is a program that helps you manage modern drives), as shown below:\n# gdisk \u0026lt;your drive\u0026gt; This will change your shell prompt from:\nroot@archiso ~ # to\nCommand (? for help): Enter \u0026ldquo;expert mode\u0026rdquo; as shown below (expert mode allows you to do more things with your drive):\nCommand (? for help): x Which changes your prompt to this:\nExpert command (? for help): Delete everything on your drive using the below command:\nExpert command (? for help): z This will bring up a warning message to confirm this is absolutely, positively what you want to do.\nEnter \u0026ldquo;y\u0026rdquo; to confirm.\nAbout to wipe out GPT on {your drive}. Proceed (Y/N): y Another message will pop up:\nGPT data structures destroyed! You may now proceed to partition the disk using fdisk or other utilities. Blank out MBR? (Y/N): Enter \u0026ldquo;y\u0026rdquo; to confirm the above. This will overwrite the first 512 bytes of your drive so that any bootloader you install later on will not get confused.\nAfter clearing your drive, gdisk will return you to your regular shell prompt (as seen below):\nroot@archiso ~ # Return to the gdisk shell by entering:\n# gdisk \u0026lt;your drive\u0026gt; Changing your prompt back to:\nCommand (? for help): You will want to create partitions for Arch Linux to live on. This can easily be done by entering the following commands.\nFirstly, you want to create a boot partition (as shown below):\nCommand (? for help): n gdisk will then ask you what number you want to give this partition, as shown below.\nPartition number (1-128, default 1): Simply press enter when it prompts you with the above. Here, gdisk just gives the partition the next unused number.\nNext, gdisk will ask you where you want the partition to begin.\nFirst sector (\u0026lt;...\u0026gt;, default=2048) or {+-}size{KMGTP}: Press enter to begin the partition at the first bit of free space it can allow.\nThen, gdisk will ask how big you want the partition to be (as shown below).\n1 gigabyte is more than enough for a boot partition.\nLast sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: +1G It will then ask you what type of partition you want to create.\nWe want to create a modern boot partition. So enter \u0026lsquo;EF00\u0026rsquo; as shown below.\nCurrent type is \u0026#39;Linux filesystem\u0026#39; Hex code or GUID (L to show codes, Enter = 8300): EF00 It will then return you to:\nCommand (? for help): You will want to set a \u0026ldquo;label\u0026rdquo; for this partition - a unique name to help you identify this partition.\nFor the purposes of this guide, it will be labelled as \u0026ldquo;boot\u0026rdquo;\nCommand (? for help): c gdisk will then ask you which partition you want to label. Select partition 1\nPartition number (1-1): 1 Then it will ask you to set the label for this partition. Enter boot\nEnter name: boot This time, you will want to create a swap partition.\nCreate a new partition as shown below.\nCommand (? for help): n gdisk will then ask you what number you want to give this partition, as shown below.\nHit enter to use the default.\nPartition number (2-128, default 2): Next, gdisk will ask you where you want the partition to begin.\nHit enter to use the default.\nFirst sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: Then, gdisk will ask you how big you want the partition to be.\nThe size of this partition will depend on how big your RAM is. Make your swap partition twice the size of your RAM, or use 16 gigabytes, whichever is smaller.\nThe below is for if your RAM is 16 gigabytes or larger.\nLast sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: +16G It will then ask you what type of partition you want to create.\nWe want to create a swap partition. So enter \u0026lsquo;8200\u0026rsquo; as shown below.\nCurrent type is \u0026#39;Linux filesystem\u0026#39; Hex code or GUID (L to show codes, Enter = 8300): 8200 Now, you will want to name this partition swap.\\\nCommand (? for help): c Enter the number for the swap partition (2):\nPartition number (1-2): 2 Then name it swap\nEnter name: swap Now, you want to create a partition for your system files to live in (your root partition)\nCommand (? for help): n Press enter to the below prompts to use their defaults:\nPartition number (3-128, default 3): And:\nFirst sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: Now for the size of your root partition. If your drive is small (less than 128GB), press enter to the below prompt to use up the rest of your drive. This will mean that your system files and things like documents will live in the same space on your drive.\nLast sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: If your drive is 128GB in size or higher, then give your root partition 40GB in space.\nLast sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: +40G Simply press enter when given the below prompt, to tell your computer that this is just a regular filesystem partition.\nCurrent type is \u0026#39;Linux filesystem\u0026#39; Hex code or GUID (L to show codes, Enter = 8300): Now, you will want to name this partition root.\nCommand (? for help): c Enter 3 to the below prompt to select the root partition.\nPartition number (1-3): 3 Then, name it root.\nEnter name: root If you have a large drive You also want to create a home partition for the files that are not boot, not root and not swap to live in.\nCommand (? for help): n Press enter to the below prompts to use their defaults:\nPartition number (4-128, default 4): And:\nFirst sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: And the below (which tells gdisk to make the partition use up the rest of your drive):\nLast sector (\u0026lt;...\u0026gt;, default=\u0026lt;...\u0026gt;) or {+-}size{KMGTP}: And:\nCurrent type is \u0026#39;Linux filesystem\u0026#39; Hex code or GUID (L to show codes, Enter = 8300): You will want to name this partition home.\nCommand (? for help): c Enter 4 to the below prompt to select the home partition.\nPartition number (1-4): 4 Then name it home\nEnter name: home These partitions have been created, but have not actually been written to the drive.\ngdisk has only kept track of them in memory.\nTo actually write them to drive, enter the below command:\nCommand (? for help): w gdisk will confirm with you to ensure that you want to write these partitions to your drive.\nEnter y to confirm these changes.\nFinal checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING PARTITIONS!! Do you want to proceed? (Y/N): y You should then see the following message:\nOK; writing new GUID partition table (GPT) to \u0026lt;your drive\u0026gt; The operation has completed successfully Then you will be returned to the shell prompt (see below)\nroot@archiso ~ # Formatting partitions # Now that these partitions have been created, it is now time to make them actually useable.\nTo do this, you will have to format the partitions.\nFor most users, there are two filesystems that you can format your root (and home, if applicable) partition(s) to: btrfs and ext4.\nBtrfs offers snapshots and checksumming. Snapshots are like freeze-frames of your entire filesystem so that if you screw something up, you can easily restore your files to how they were to some point in time before you screwed things up.\nChecksumming just ensures that your data hasn\u0026rsquo;t been maliciously tampered with.\next4 doesn\u0026rsquo;t have these things, but it is quite fast and is the most common filesystem you will find on Linux.\nCheck that your partitions are correct by typing in the below command:\nlsblk Format the boot partition, as shown below:\nmkfs.fat -F32 /dev/disk/by-partlabel/boot Then, format the swap partition, as shown below:\nmkswap /dev/disk/by-partlabel/swap If you want to encrypt your drive If you want to encrypt your drive, namely your root and home partitions, you will have to set up LUKS encryption, which this guide will go over.\nFirstly, ensure that your swap and boot partitions have been formatted.\nThen, start by encrypting your root partition, as shown below:\ncryptsetup luksFormat /dev/disk/by-partlabel/root cryptsetup will give you a warning, and ask for confirmation before encrypting your drive.\nTo confirm, simply type YES in all caps as shown below.\nWARNING! ======== This will overwrite data on /dev/disk/by-partlabel/root irrevocably. Are you sure? (type \u0026#39;yes\u0026#39; in capital letters): YES cryptsetup will then ask you to set a passphrase. You should set a strong passphrase, preferably with a range of lower and upper case letters, numbers and punctuation. Make sure it is memorable too, because if you do not remember this, your root partition will permanently inaccessible.\nEnter passphrase: Then, it will ask you to verify this passphrase:\nVerify passphrase: Then, it will start encrypting your root partition, which may take a while.\nThen, you will want to encrypt your home partition.\ncryptsetup luksFormat /dev/disk/by-partlabel/home cryptsetup will ask you for a passphrase, this can be the same as the passphrase you used for your root partition.\nEnter passphrase: Then, it will ask you to verify this passphrase:\nVerify passphrase: Then, it will start encrypting your home partition, which may take a while.\nNow, in order to install anything on to your root and home partitions, you will have to open them, as shown below:\ncryptsetup open /dev/disk/by-partlabel/root cryptroot It will then ask you for your passphrase:\nEnter passphrase for /dev/disk/by-partlabel/root: Do the same for your home partition:\ncryptsetup open /dev/disk/by-partlabel/home crypthome It will then ask you for your passphrase:\nEnter passphrase for /dev/disk/by-partlabel/home: Now that the root and home partitions have been opened, it is time to format them. Then, format the root partition, as shown below:\nmkfs.btrfs /dev/mapper/cryptroot -f # OR, do not run the below command if you have run the one above, or vice versa. mkfs.ext4 -F /dev/mapper/cryptroot If you have created a home partition, go ahead and format it.\nmkfs.btrfs /dev/mapper/crypthome -f # OR, do not run the below command if you have run the one above, or vice versa. mkfs.ext4 -F /dev/mapper/crypthome Once you have done all of the above, go ahead and skip to If you have encrypted your root and home partitions under Mounting partitions\nThen, format the root partition, as shown below:\nmkfs.btrfs /dev/disk/by-partlabel/root -f # OR, do not run the below command if you have run the one above, or vice versa. mkfs.ext4 -F /dev/disk/by-partlabel/root If you have created a home partition, go ahead and format it.\nmkfs.btrfs /dev/disk/by-partlabel/home -f # OR, do not run the below command if you have run the one above, or vice versa. mkfs.ext4 -F /dev/disk/by-partlabel/home Mounting partitions # For the partitions to be accessible to the Arch ISO, you need to mount them, which means to make them an accessible location on the Arch ISO.\nIf you have encrypted your root and home partitions Start by mounting the root partition:\nmount /dev/mapper/cryptroot /mnt Then, mount the swap partition:\nswapon /dev/disk/by-partlabel/swap Then, mount the boot partition:\nmount -m /dev/disk/by-partlabel/boot /mnt/boot Finally, mount the home parititon:\nmount -m /dev/mapper/crypthome /mnt/home Once you\u0026rsquo;ve finished all of the above, you\u0026rsquo;ve finished with this page of the guide. Move on with the next page.\nTo do this, start by mounting the root partition.\nmount /dev/disk/by-partlabel/root /mnt Then mount your swap partition:\nswapon /dev/disk/by-partlabel/swap Then the boot partition:\nmount -m /dev/disk/by-partlabel/boot /mnt/boot And finally, the home partition:\nmount -m /dev/disk/by-partlabel/home /mnt/home ","externalUrl":null,"permalink":"/arch-install-guide/drive_partitioning/","section":"Arch Install Guide","summary":"Informs you on what partitions to make, how to make them, and how to format and mount them","title":"Partitioning the drive","type":"arch-install-guide"},{"content":"Now that the internet and partitions have been fully sorted out, it is now time to set up the mirrorlist. This is to make sure that you get the faster download speeds possible.\nEnabling parallel downloads # Speaking of, edit the pacman.conf file using the command below:\nnano /etc/pacman.conf And uncomment the following line (meaning, remove the hashtag preceding the line):\n#ParallelDownloads = 5 So that it becomes:\nParallelDownloads = 5 This single line means that, instead of downloading each package one at a time, it will downloads five at once.\nHit Ctrl+W then Enter to save. Then hit Ctrl+Q to exit out of Nano.\nSetting up the mirrorlist # To create the mirrorlist, run the following command\nreflector -c \u0026lt;your country\u0026gt; -a 12 -p https --sort rate --save /etc/pacman.d/mirrorlist -c specifies the country that you live in. This is so that the mirrors have a low ping.\n-a specifies the \u0026ldquo;age\u0026rdquo; of the mirrors. The \u0026ldquo;age\u0026rdquo; is how long the mirrors have gone without being updated. A lower \u0026ldquo;age\u0026rdquo; normally means that the mirror gets updated more frequently.\n-p specifies the \u0026ldquo;protocol\u0026rdquo; of the mirrors, which means, how the packages are downloaded. Specifying \u0026ldquo;HTTPS\u0026rdquo; here means that your downloads are kept secure (i.e. not tampered with during the download).\n--sort specifies how the mirrors should be sorted. You will want to sort them by how fast the download rates are (for obvious reasons)\n--save specifies where this mirrorlist should be saved. pacman will check /etc/pacman.d/mirrorlist for the mirrorlist, so it makes sense to save it there.\nInstalling the base system # You will want to install the bare minimum just so that you can install and configure things properly inside of your actual operating system. You can this using the pacstrap command shown below:\npacstrap -K /mnt base base-devel linux linux-firmware nano intel-ucode mtools dosfstools networkmanager base is a minimal package set that defines a basic Arch Linux installation.\nbase-devel is a set of basic tools to build Arch Linux packages.\nlinux is the kernel itself.\nlinux-firmware is a set of firmware files to assist the Linux kernel.\nnano is a text editor, which will be used to edit configuration files later on. Feel free to replace this with vim, neovim or emacs if you are more familiar with those.\nintel-ucode provides low-level firmware updates for Intel CPUs to fix bugs, security vulnerabilities and strange behaviour. If you use an AMD CPU instead, replace this with amd-ucode.\nmtools allows you to access FAT filesystems. This is helpful for if you want to plug in any USB drive or SD cards in to your computer. FAT (or File Allocation Table) is a family of filesystems that are common on external storage devices - the most common of which is FAT32.\ndosfstools allows you to format and repair FAT filesystems.\nnetworkmanager allows you to connect to the internet and manages things like Wi-FI, ethernet, VPNs, mobile broadband modems, proxies .etc\nIf you formatted your root/home partition(s) to btrfs, append the below package to the command:\nbtrfs-progs btrfs-progs is a set of tools to help you manage btrfs filesystems on Linux.\nHowever, if you formatted yout root/home partition(s) to ext4, append the below package to the command:\ne2fsprogs It does the same things that btrfs-progs except for ext4 filesystems instead of btrfs filesystems.\nIf you connected to the internet via modemmanager, go ahead and append the below packages to the command:\nmodemmanager usb_modeswitch modemmanager allows you to connect the internet through a mobile broadband modem.\nusb_modeswitch fixes an annoying problem when handling with mobile broadband modems. With certain mobile broadband modems plugged into the computer via USB, Linux sometimes mistakens these as storage devices instead of modems. This package fixes that problem by teling the modem, \u0026ldquo;stop pretending to be a CD, go into modem mode\u0026rdquo;\nGenerating the fstab file # Arch Linux will not actually remember where to mount the partitions you have mounted to.\nTo make it remember, you will have to create an fstab file, which describes the partitions and where to mount them to on boot.\nThis is done with the below command:\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Note\nA \u0026gt; will overwrite a file and a \u0026gt;\u0026gt; will append to a file. Make sure you don\u0026rsquo;t confuse these with each other, and make sure the commands you type are as how this guide has written it before you hit enter.\n","externalUrl":null,"permalink":"/arch-install-guide/base_system_installation/","section":"Arch Install Guide","summary":"Informs you on how to set up the mirrorlist, fstab file and how to install the bare minimum so that you can fully set up the operating system later","title":"Partitioning the drive","type":"arch-install-guide"},{"content":"","date":"21 June 2025","externalUrl":null,"permalink":"/","section":"The Cove of Bahmoudd","summary":"","title":"The Cove of Bahmoudd","type":"page"},{"content":" As you all may know, Wayland has existed for 20-ish years and is still incomplete. Take, for example, accessibility. On-screen keyboards, for example, are pretty difficult to set up on Wayland compositors, to put it lightly.\nThe direction freedesktop is taking with Wayland is not the direction most people want regular display protocols to take. Many projects like Flatpak and Appimage try to unify the Linux desktop by providing a common packaging format that is compatible amongst most distros (well, the distros that people actually use, of course).\nBy leaving pretty much everything to the compositor, like important functionality such as managing refresh rates, managing multiple monitors, setting specific resolutions .etc, this means that developers who want to make desktop environments have to write more boilerplate to get basic functionality out of the display server. Since distros are more likely to prefer one desktop environment over another, this means that basic things like setting resolution will be different from one distro to another. What the fuck, Wayland? This is going against many developers\u0026rsquo; efforts to unify the Linux desktop.\nSince there\u0026rsquo;s no simple command to change basic things, beginners will have to enter rabbit holes in order to find the one command that allows them to do things. Hence, why the \u0026ldquo;year of the Linux desktop\u0026rdquo; is being placed out of the reach of Linux users because of freedesktop.\nThe people that worked on X11 now work on Wayland. So, freedesktop has been trying to kill Wayland for some time now. Project developers killing good things is not what I signed up for when switching to Linux - it\u0026rsquo;s exactly why I\u0026rsquo;m phasing Microsoft out of my life.\nBy forking X11 and creating Xlibre, Enrico Weigelt is essentially preserving the essence of the FOSS world - if a project dies out, fork it, and if that fork dies, fork that one and so on.\nX11 was itself a fork of Xfree86. Xfree86 was forked because the people actually doing work on the project were being fucked over by the fellas leading the Xfree86 project. Now the same thing is happening between freedesktop and Weigelt. Refer to the image below.\nThis \u0026ldquo;you will own nothing and you will be happy\u0026rdquo; mentality is not what I signed up for when installing Linux. Weigelt forking the X.org project is honestly doing the work that probably should have been done some time ago.\nChanging the topic slightly, whilst I\u0026rsquo;m not a fan of Wayland, I\u0026rsquo;m pretty much forced to use it. Most drivers and new software is only gonna work on Wayland, and this is only going to get worse later on. Forking X11 is the first step in producing a usuable Linux desktop space. Now all we need is people to start making software and shit for X now, which might or might not happen. Only time will tell.\n","date":"21 June 2025","externalUrl":null,"permalink":"/posts/xlibre/","section":"Posts","summary":"A discussion about Xlibre and Wayland, and why a fork of X.org is so desparately needed","title":"Xlibre is the FOSS world in action","type":"posts"},{"content":"","date":"27 April 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" What will this site be about # This site is essentially a side project for me to record my thoughts about stuff, which will mostly be about tech and the FOSS world. This site may contain unpopular or controversial opinions, so if you\u0026rsquo;re a person who can\u0026rsquo;t cope with that and call everything you disagree with \u0026ldquo;ragebait\u0026rdquo;, then kindly click off my site. Also, this site will not be a place for tech news, but rather provide commentary on what happens in the tech world, so please don\u0026rsquo;t treat this site as such, as I want everyone to have an informed view of the tech world, instead of just listening to my one-sided two cents on it.\n","date":"27 April 2025","externalUrl":null,"permalink":"/posts/initial_post/","section":"Posts","summary":"A list of things that will go over what I may post in my site, and what people can expect to see here","title":"Initial post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"Compilation is the act of turning source code into machine code.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/compilation/","section":"Arch Install Guide","summary":"","title":"compilation","type":"arch-install-guide"},{"content":"A \u0026ldquo;distro\u0026rdquo; (or Linux distribution) is a bundle of software including a fully-configured copy of the Linux kernel, and other software which allow applications to run. For example, Arch Linux is a distro that comes bundled with the GNU software collection, systemd, and pacman.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/distro/","section":"Arch Install Guide","summary":"","title":"distro","type":"arch-install-guide"},{"content":"A filesystem is a set of rules as to how files should be organised and accessed on a partition - this usually deletes everything on that partition (if there\u0026rsquo;s anything on there to begin with). Think of the partition as a piece of paper. Formatting is like drawing the guide lines, margin and setting the page layout so you can write inside of it properly, of course, for the piece of paper to be useful, everything on it needs to be rubbed out before you can do so.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/filesystem/","section":"Arch Install Guide","summary":"","title":"filesystem","type":"arch-install-guide"},{"content":"To format a partition means to prepare it for storing files by creating a filesystem on it.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/format/","section":"Arch Install Guide","summary":"","title":"format","type":"arch-install-guide"},{"content":"GNU, is a collection of software that allows you to fully interact with your computer. Linux was created after GNU as it has no kernel, which is essential for a computer to run.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/gnu/","section":"Arch Install Guide","summary":"","title":"gnu","type":"arch-install-guide"},{"content":"An init process is the first process your computer loads when powering on. It is the parent of all processes - it sets them up and manages them. It does things like running background processes, configures hardware et cetera, and makes sure that the computer has come to the state where it\u0026rsquo;s ready for you to use. It stays running the entire time that your computer is on, managing processes as I have stated before and handling errors if they crash. Arch Linux uses systemd, which is an entire suite of software, not just an init system, doing things such as logging and networking. It\u0026rsquo;s easy to manage as everything is in one place, and provides fast boot-up times.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/init/","section":"Arch Install Guide","summary":"","title":"init","type":"arch-install-guide"},{"content":"An iso file is, generally speaking, an \u0026ldquo;image\u0026rdquo; (or snapshot) of what would be written to something like a CD or drive. However, within the context of this guide, an ISO file is a single file that contains all the data needed to install an operating system. Arch Linux is installed using a live ISO, meaning that the operating system that boots from it is a complete and fully-functional operating system. However, this is only used as an intermediate stage to get Arch Linux installed on to your drive.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/iso/","section":"Arch Install Guide","summary":"","title":"iso file","type":"arch-install-guide"},{"content":"A kernel is the middleman between programs and hardware. An example of this is the NT kernel, which is what Windows uses.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/kernel/","section":"Arch Install Guide","summary":"","title":"kernel","type":"arch-install-guide"},{"content":"Linux is a Unix-like kernel released in 1991 by Linus Torvalds.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/linux/","section":"Arch Install Guide","summary":"","title":"linux","type":"arch-install-guide"},{"content":"Machine code (also known as a \u0026lsquo;binary executable\u0026rsquo;, or just \u0026lsquo;binary\u0026rsquo;) is what computers can actually understand and run (or \u0026ldquo;execute\u0026rdquo;).\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/machine-code/","section":"Arch Install Guide","summary":"","title":"machine code","type":"arch-install-guide"},{"content":"A mirror is essentially a duplicate copy of some data on a master server (a server that the data was originally uploaded on). Mirrors are kept for two reasons, to have a copy in case something goes wrong on the master server (or, \u0026ldquo;redundancy\u0026rdquo;) and speed. Mirrors are set up on Linux distros to make download speeds faster, because, put simply, the closer you are to a server, the less time it takes to upload and download data. This is why the mirrorlist exists, as really slow download speeds can time out, meaning that your computer will give up after some period of waiting.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/mirror/","section":"Arch Install Guide","summary":"","title":"mirror","type":"arch-install-guide"},{"content":"A package manager is a collection of software that automates the process of installing, updating and deleting software on a computer in a consistent manner. Arch Linux uses pacman (not to be confused with the \u0026rsquo;80s arcade game) which is a rolling release package manager, meaning that software is not released as regular, big updates every once in a while, but rather, small and continuous updates delivered frequently.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/package-manager/","section":"Arch Install Guide","summary":"","title":"package manager","type":"arch-install-guide"},{"content":"A partition is an explicitly defined section of your drive. Each partition on your computer can be managed separately, meaning all of the data on one partition is completely different from the data on another. This is useful for keeping data crucial for your system to run from other data like documents.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/partition/","section":"Arch Install Guide","summary":"","title":"partition","type":"arch-install-guide"},{"content":"Not to be confused with the root user. The root directory is the furthest back in a file structure you can go. It is where all the branches created from files and folders on your computer originate from. It holds important folders such as /boot/ and /home/.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/root-directory/","section":"Arch Install Guide","summary":"","title":"root directory","type":"arch-install-guide"},{"content":"Not to be confused with the root directory. The root user is the most powerful user on your computer capable of performing any task with zero restrictions. Regular users can\u0026rsquo;t and shouldn\u0026rsquo;t be able to run everything as root, because it\u0026rsquo;s too easy to, for example, delete something important that is essential for your OS to function. This is why it\u0026rsquo;s good practice to make a user separate from the root user, and add a password to it so you think more about what you type in to your shell.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/root-user/","section":"Arch Install Guide","summary":"","title":"root user","type":"arch-install-guide"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"The shell is the text interface that allows you to interact with your computer that surrounds the kernel to hide its intricate details.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/shell/","section":"Arch Install Guide","summary":"","title":"shell","type":"arch-install-guide"},{"content":"A signature (or a \u0026lsquo;hash signature\u0026rsquo;, or just \u0026lsquo;hash\u0026rsquo;) is a random string of letters assigned to a file that serves as its unique digital fingerprint. A good hashing algorithm (such as SHA-256) produces a unique string of letters for each input it is given, if they are different. This means that it is impossible for a file to be tampered with without producing an extremely different hash. This is why it is important to check the signature of each file you download off the internet with the one given by the software\u0026rsquo;s publisher.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/signature/","section":"Arch Install Guide","summary":"","title":"signature","type":"arch-install-guide"},{"content":"Source code is what computer programmers write to make computers do things. It needs to be converted into machine code before it can be run (or \u0026ldquo;executed\u0026rdquo;). Programs can either be distributed as source code, meaning that the user has to compile it themselves, or they can be distributed as machine code where no compilation is needed. Both approaches have their upsides and downsides. Source code distributions means that the user has to compile the code, meaning that your program suddenly has a learning curve attached to it. Machine code distributions mean that your program now only works for one kind of machine and operating system (for example, if you compile your program on an x64 Linux machine, the machine code binary will only work other x64 Linux machines).\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/source-code/","section":"Arch Install Guide","summary":"","title":"source code","type":"arch-install-guide"},{"content":"Linux swap is either a file or partition on your drive. It is used as a section of your disk that can store data in RAM even when the computer is off (for hibernation, which is important for laptop users) or be used in case RAM runs out. Even if you are not on a laptop and have a sufficient amount of RAM, some programs rely solely on swap, so make create swap space regardless. This guide will not create a swapfile, but rather, a swap partition to keep the swap data separate from everything else.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/swap/","section":"Arch Install Guide","summary":"","title":"swap","type":"arch-install-guide"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Unix is an operating system family that started off at AT\u0026amp;T. It became very influential within academic circles, leading to large-scale adoption by start-up companies, leading Unix to fragment into much smaller, similar but mostly mutually incompatible OSes. Among these are MacOS and the BSD operating systems (FreeBSD, OpenBSD, NetBSD .etc). An operating system is said to be Unix-like if it behaves like a Unix operating system. For this reason, Linux is generally considered to be Unix-like. The reason why Linux is Unix-like and not Unix is because it is commonly paired with GNU, which stands for \u0026ldquo;GNU\u0026rsquo;s Not Unix\u0026rdquo;.\n","externalUrl":null,"permalink":"/arch-install-guide/glossary/unix-like/","section":"Arch Install Guide","summary":"","title":"unix-like","type":"arch-install-guide"}]